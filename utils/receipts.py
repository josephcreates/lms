# utils/receipts.py
import os
from flask import current_app
from fpdf import FPDF
from models import ClassFeeStructure, StudentFeeTransaction  # ensure models are imported
from sqlalchemy import func

FONT_DIR = os.path.join("static", "fonts")

class ReceiptPDF(FPDF):
    def header(self):
        logo_path = os.path.join("static", "NEDO_GLOBAL.png")
        if os.path.exists(logo_path):
            self.image(logo_path, x=10, y=8, w=25)

        self.set_xy(40, 10)
        self.set_font("DejaVu-Bold", size=18)
        self.set_text_color(34, 34, 34)
        self.cell(0, 10, "GreNaTech School", ln=True, align="C")

        self.set_font("DejaVu", size=12)
        self.set_text_color(80, 80, 80)
        self.cell(0, 10, "Official Payment Receipt", ln=True, align="C")
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font("DejaVu", size=8)
        self.set_text_color(160)
        self.cell(0, 10, f"Generated by GreNaTech LMS - Page {self.page_no()}", align="C")

def generate_receipt(transaction, student):
    from app import db  # import here to avoid circular import

    pdf = ReceiptPDF()
    pdf.add_font("DejaVu", "", os.path.join(FONT_DIR, "DejaVuSans.ttf"), uni=True)
    pdf.add_font("DejaVu-Bold", "", os.path.join(FONT_DIR, "DejaVuSans-Bold.ttf"), uni=True)
    pdf.add_font("DejaVu-Italic", "", os.path.join(FONT_DIR, "DejaVuSans-Oblique.ttf"), uni=True)

    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_fill_color(248, 248, 248)
    pdf.set_draw_color(200, 200, 200)

    # === Calculations ===
    student_class = student.student_profile.current_class
    year = transaction.academic_year
    semester = transaction.semester

    # Total Fee for class/year/semester
    total_fee = db.session.query(func.sum(ClassFeeStructure.amount)).filter_by(
        class_level=student_class,
        academic_year=year,
        semester=semester
    ).scalar() or 0

    # Total Approved Payments by student
    approved_payments = db.session.query(func.sum(StudentFeeTransaction.amount)).filter_by(
        student_id=student.id,
        academic_year=year,
        semester=semester,
        is_approved=True
    ).scalar() or 0

    outstanding = total_fee - approved_payments

    # === Receipt Header ===
    pdf.set_font("DejaVu-Bold", "", 11)
    semester_code = 'F' if semester.lower() == 'first' else 'S'
    receipt_number = f"RCT-GNT-{year[:4]}{semester_code}-{student.id}-TX{transaction.id:04d}"
    pdf.cell(0, 10, f"Receipt #: {receipt_number}", ln=True)
    pdf.ln(3)

    def info_row(label, value):
        pdf.set_font("DejaVu-Bold", "", 10)
        pdf.cell(60, 8, label, border=0)
        pdf.set_font("DejaVu", "", 10)
        pdf.cell(0, 8, str(value), ln=True)

    # === Payment Info Section ===
    info_row("Student Name:", student.full_name)
    info_row("Student ID:", student.user_id)
    info_row("Academic Year:", year)
    info_row("Semester:", semester)
    info_row("Amount Paid (This Txn):", f"GHS {transaction.amount:.2f}")
    info_row("Description:", transaction.description)
    info_row("Payment Date:", transaction.timestamp.strftime('%Y-%m-%d %I:%M %p'))
    info_row("Payment Status:", "âœ… Approved")

    pdf.ln(5)
    pdf.set_draw_color(180, 180, 180)
    pdf.set_line_width(0.2)
    pdf.line(10, pdf.get_y(), 200, pdf.get_y())  # horizontal line
    pdf.ln(6)

    # === Summary Section ===
    pdf.set_font("DejaVu-Bold", "", 11)
    pdf.cell(0, 10, "Fee Summary", ln=True)

    info_row("Total Fee:", f"GHS {total_fee:.2f}")
    info_row("Approved Payments:", f"GHS {approved_payments:.2f}")
    info_row("Outstanding Balance:", f"GHS {outstanding:.2f}")

    pdf.ln(10)
    pdf.set_font("DejaVu-Italic", "", 9)
    pdf.set_text_color(90)
    pdf.multi_cell(0, 8, "This is a system-generated receipt. If you have any concerns, please contact the school accounts office with the receipt number above.")

    # === Save ===
    folder = current_app.config.get('RECEIPT_FOLDER', os.path.join("static", "receipts"))
    os.makedirs(folder, exist_ok=True)

    filename = f"receipt_{transaction.id}.pdf"
    filepath = os.path.join(folder, filename)
    pdf.output(filepath)
    return filename
